<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Chil's Korean Store</title>
    <link rel="icon" type="image/png" href="/favicon/favicon.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #667eea;
            --primary-dark: #5a6fd8;
            --secondary: #764ba2;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --dark: #1f2937;
            --light: #f8fafc;
            --gray: #6b7280;
            --gray-light: #e5e7eb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: #f1f5f9;
            color: var(--dark);
            line-height: 1.6;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 260px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 0;
            transition: all 0.3s;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .sidebar-header h1 {
            font-size: 20px;
            font-weight: 700;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s;
            border-left: 3px solid transparent;
            cursor: pointer;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-left-color: white;
        }

        .nav-item i {
            width: 20px;
            margin-right: 12px;
            font-size: 16px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 0;
            overflow-y: auto;
        }

        .top-bar {
            background: white;
            padding: 16px 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .logout-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: background 0.3s;
            text-decoration: none;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        /* Content Area */
        .content-area {
            padding: 24px;
        }

        .welcome-banner {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 24px;
            border-radius: 12px;
            margin-bottom: 24px;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .welcome-banner h2 {
            font-size: 24px;
            margin-bottom: 8px;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            display: flex;
            align-items: center;
            gap: 16px;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .stat-icon.products { background: rgba(16, 185, 129, 0.1); color: var(--success); }
        .stat-icon.orders { background: rgba(102, 126, 234, 0.1); color: var(--primary); }
        .stat-icon.customers { background: rgba(245, 158, 11, 0.1); color: var(--warning); }
        .stat-icon.revenue { background: rgba(239, 68, 68, 0.1); color: var(--danger); }

        .stat-info h3 {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 4px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-number {
            font-size: 28px;
            font-weight: 700;
            color: var(--dark);
        }

        /* Dashboard Sections */
        .dashboard-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            margin-bottom: 24px;
            overflow: hidden;
        }

        .section-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--gray-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-header h2 {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
        }

        .section-content {
            padding: 24px;
        }

        /* Tabs */
        .nav-tabs {
            display: flex;
            border-bottom: 1px solid var(--gray-light);
            margin-bottom: 20px;
        }

        .nav-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            border-bottom: 2px solid transparent;
            font-weight: 500;
            color: var(--gray);
        }

        .nav-tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Products Table */
        .products-table {
            width: 100%;
            border-collapse: collapse;
        }

        .products-table th,
        .products-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid var(--gray-light);
        }

        .products-table th {
            font-weight: 600;
            color: var(--gray);
            font-size: 14px;
        }

        .product-image {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            object-fit: cover;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-available {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .status-unavailable {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }

        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }

        .edit-btn {
            background: rgba(102, 126, 234, 0.1);
            color: var(--primary);
        }

        .delete-btn {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }

        .action-btn:hover {
            transform: translateY(-1px);
        }

        /* Add Product Form */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid var(--gray-light);
            border-radius: 6px;
            font-size: 14px;
            transition: border 0.3s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .image-upload {
            border: 2px dashed var(--gray-light);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: border 0.3s;
        }

        .image-upload:hover {
            border-color: var(--primary);
        }

        .image-preview {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
            margin-top: 10px;
            display: none;
        }

        .submit-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .submit-btn:hover {
            background: var(--primary-dark);
        }

        /* Chart Container */
        .chart-container {
            height: 300px;
            position: relative;
        }

        /* Orders List */
        .orders-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .order-card {
            border: 1px solid var(--gray-light);
            border-radius: 8px;
            padding: 16px;
            transition: box-shadow 0.3s;
        }

        .order-card:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .order-number {
            font-weight: 600;
            color: var(--dark);
        }

        .order-status {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-pending { background: #fef3c7; color: #d97706; }
        .status-confirmed { background: #dbeafe; color: #2563eb; }
        .status-preparing { background: #fce7f3; color: #db2777; }
        .status-ready { background: #dcfce7; color: #16a34a; }
        .status-completed { background: #f0fdf4; color: #15803d; }
        .status-cancelled { background: #fef2f2; color: #dc2626; }

        .order-details {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr;
            gap: 16px;
        }

        .order-items {
            color: var(--gray);
        }

        .order-total {
            font-weight: 600;
        }

        .order-date {
            color: var(--gray);
            font-size: 14px;
        }

        /* Loading and Error States */
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }

        .error-message {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 16px;
            border-radius: 8px;
            margin: 16px 0;
            text-align: center;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 15px;
            max-width: 400px;
            animation: slideIn 0.3s ease-out;
        }

        .notification-success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid var(--success);
        }

        .notification-error {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid var(--danger);
        }

        .notification-info {
            background: #d1ecf1;
            color: #0c5460;
            border-left: 4px solid var(--primary);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .order-details {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .products-table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-utensils"></i>
                <h1>Chil's Korean Store</h1>
            </div>
            <div class="sidebar-nav">
                <a class="nav-item active" data-tab="dashboard">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
                <a class="nav-item" data-tab="products">
                    <i class="fas fa-box-open"></i>
                    Products
                </a>
                <a class="nav-item" data-tab="orders">
                    <i class="fas fa-receipt"></i>
                    Orders
                </a>
                <a class="nav-item" data-tab="analytics">
                    <i class="fas fa-chart-bar"></i>
                    Analytics
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="top-bar">
                <h2>Admin Dashboard</h2>
                <div class="user-menu">
                    <div class="user-avatar" id="userAvatar">
                        A
                    </div>
                    <span id="welcomeUser">Welcome, Admin!</span>
                    <a href="/auth/logout" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        Logout
                    </a>
                </div>
            </div>

            <div class="content-area">
                <!-- Welcome Banner -->
                <div class="welcome-banner">
                    <h2 id="welcomeMessage">Welcome back, Admin!</h2>
                    <p>Here's what's happening with your store today.</p>
                </div>

                <!-- Stats Grid -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon products">
                            <i class="fas fa-box"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Products</h3>
                            <div class="stat-number" id="totalProducts">0</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon orders">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Orders</h3>
                            <div class="stat-number" id="totalOrders">0</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon customers">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Customers</h3>
                            <div class="stat-number" id="totalCustomers">0</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon revenue">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Revenue Today</h3>
                            <div class="stat-number">₱<span id="revenueToday">0.00</span></div>
                        </div>
                    </div>
                </div>

                <!-- Dashboard Tabs -->
                <div class="dashboard-section">
                    <div class="section-header">
                        <h2>Store Management</h2>
                    </div>
                    <div class="section-content">
                        <!-- Navigation Tabs -->
                        <div class="nav-tabs">
                            <button class="nav-tab active" data-tab="dashboard">Dashboard</button>
                            <button class="nav-tab" data-tab="products">Products</button>
                            <button class="nav-tab" data-tab="orders">Orders</button>
                            <button class="nav-tab" data-tab="analytics">Analytics</button>
                        </div>

                        <!-- Dashboard Tab -->
                        <div class="tab-content active" id="dashboard-tab">
                            <h3>Recent Activity</h3>
                            <div id="recentOrders">
                                <div class="loading">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading recent orders...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Products Tab -->
                        <div class="tab-content" id="products-tab">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                                <h3>Product Management</h3>
                                <button class="submit-btn" onclick="showAddProductForm()">
                                    <i class="fas fa-plus"></i>
                                    Add New Product
                                </button>
                            </div>
                            
                            <!-- Add Product Form (Initially Hidden) -->
                            <div id="addProductForm" style="display: none; background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                                <h4 style="margin-bottom: 16px;" id="productFormTitle">Add New Product</h4>
                                <form id="productForm" enctype="multipart/form-data">
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="name">Product Name</label>
                                            <input type="text" id="name" name="name" class="form-control" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="price">Price (₱)</label>
                                            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" required>
                                        </div>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="description">Description</label>
                                        <textarea id="description" name="description" class="form-control" rows="3" required></textarea>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="category">Category</label>
                                            <select id="category" name="category" class="form-control" required>
                                                <option value="">Select Category</option>
                                                <option value="main-course">Main Course</option>
                                                <option value="side-dish">Side Dish</option>
                                                <option value="beverage">Beverage</option>
                                                <option value="dessert">Dessert</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="stock">Stock</label>
                                            <input type="number" id="stock" name="stock" class="form-control" min="0" required>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="spiceLevel">Spice Level</label>
                                            <select id="spiceLevel" name="spiceLevel" class="form-control" required>
                                                <option value="mild">Mild</option>
                                                <option value="medium">Medium</option>
                                                <option value="spicy">Spicy</option>
                                                <option value="very-spicy">Very Spicy</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="ingredients">Ingredients (comma separated)</label>
                                            <input type="text" id="ingredients" name="ingredients" class="form-control" placeholder="e.g., rice, beef, vegetables">
                                        </div>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="imageFile">Product Image</label>
                                        <input type="file" id="imageFile" name="image" class="form-control" accept="image/*">
                                        <small style="color: var(--gray);">Upload an image file (JPG, PNG, GIF). Max size: 5MB</small>
                                        <div id="currentImage" style="margin-top: 10px; display: none;">
                                            <small>Current image:</small><br>
                                            <img id="currentImagePreview" src="" alt="Current product image" style="max-width: 100px; max-height: 100px; border-radius: 4px;">
                                        </div>
                                    </div>
                                    
                                    <div style="display: flex; gap: 12px;">
                                        <button type="submit" class="submit-btn">
                                            <i class="fas fa-save"></i>
                                            <span id="submitButtonText">Save Product</span>
                                        </button>
                                        <button type="button" class="logout-btn" onclick="hideAddProductForm()">
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </div>
                            
                            <!-- Products List -->
                            <div id="productsList">
                                <div class="loading">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading products...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Orders Tab -->
                        <div class="tab-content" id="orders-tab">
                            <h3>Order Management</h3>
                            <div id="ordersList">
                                <div class="loading">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading orders...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Analytics Tab -->
                        <div class="tab-content" id="analytics-tab">
                            <h3>Sales Analytics</h3>
                            <div class="chart-container">
                                <canvas id="salesChart"></canvas>
                            </div>
                            <div style="margin-top: 20px; text-align: center;">
                                <button class="action-btn edit-btn" onclick="loadAnalytics('7d')">7 Days</button>
                                <button class="action-btn edit-btn" onclick="loadAnalytics('30d')">30 Days</button>
                                <button class="action-btn edit-btn" onclick="loadAnalytics('90d')">90 Days</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let salesChart = null;
        let currentEditingProduct = null;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Initializing admin dashboard...');
            loadUserProfile();
            loadDashboardStats();
        });

        // Tab management
        document.querySelectorAll('.nav-item, .nav-tab').forEach(item => {
            item.addEventListener('click', function() {
                const tabName = this.getAttribute('data-tab');
                
                // Update sidebar navigation
                document.querySelectorAll('.nav-item').forEach(nav => {
                    nav.classList.remove('active');
                });
                this.classList.add('active');
                
                // Update content tabs
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.getElementById(tabName + '-tab').classList.add('active');
                
                // Update top bar tabs
                document.querySelectorAll('.nav-tab').forEach(tab => {
                    tab.classList.remove('active');
                    if (tab.getAttribute('data-tab') === tabName) {
                        tab.classList.add('active');
                    }
                });
                
                // Load data for the tab
                if (tabName === 'products') {
                    loadProducts();
                } else if (tabName === 'orders') {
                    loadOrders();
                } else if (tabName === 'analytics') {
                    loadAnalytics();
                } else if (tabName === 'dashboard') {
                    loadDashboardStats();
                }
            });
        });

        // Load user profile
        function loadUserProfile() {
            // This would typically come from the server session
            // For now, we'll use the mock data from auth middleware
            document.getElementById('welcomeUser').textContent = 'Welcome, Admin!';
            document.getElementById('welcomeMessage').textContent = 'Welcome back, Admin!';
            document.getElementById('userAvatar').textContent = 'A';
        }

        // Load dashboard stats
        async function loadDashboardStats() {
            try {
                showLoading('recentOrders', 'Loading dashboard data...');
                console.log('📊 Fetching dashboard stats...');
                
                const response = await fetch('/api/admin/dashboard');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📊 Dashboard response:', data);
                
                if (data.success) {
                    document.getElementById('totalProducts').textContent = data.data.totalProducts || 0;
                    document.getElementById('totalOrders').textContent = data.data.totalOrders || 0;
                    document.getElementById('totalCustomers').textContent = data.data.totalCustomers || 0;
                    document.getElementById('revenueToday').textContent = (data.data.revenueToday || 0).toFixed(2);
                    
                    // Display recent orders
                    const recentOrdersDiv = document.getElementById('recentOrders');
                    if (data.data.recentOrders && data.data.recentOrders.length > 0) {
                        recentOrdersDiv.innerHTML = `
                            <div class="orders-list">
                                ${data.data.recentOrders.map(order => `
                                    <div class="order-card">
                                        <div class="order-header">
                                            <div class="order-number">Order #${order.orderNumber}</div>
                                            <div class="order-status status-${order.status}">${order.status.toUpperCase()}</div>
                                        </div>
                                        <div class="order-details">
                                            <div class="order-items">
                                                ${order.items ? order.items.map(item => 
                                                    `${item.quantity}x ${item.product?.name || 'Item'}`
                                                ).join(', ') : 'No items'}
                                            </div>
                                            <div class="order-total">₱${order.totalAmount?.toFixed(2) || '0.00'}</div>
                                            <div class="order-date">${new Date(order.orderDate).toLocaleDateString()}</div>
                                        </div>
                                        ${order.customer ? `
                                        <div style="margin-top: 8px; font-size: 14px; color: var(--gray);">
                                            Customer: ${order.customer.name} (${order.customer.email})
                                        </div>
                                        ` : ''}
                                    </div>
                                `).join('')}
                            </div>
                        `;
                    } else {
                        recentOrdersDiv.innerHTML = '<p>No recent orders</p>';
                    }
                    
                    showNotification('Dashboard data loaded successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to load dashboard data');
                }
            } catch (error) {
                console.error('❌ Error loading dashboard stats:', error);
                document.getElementById('recentOrders').innerHTML = `
                    <div class="error-message">
                        <p>Error loading dashboard data: ${error.message}</p>
                        <button onclick="loadDashboardStats()" style="background: var(--primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                            Try Again
                        </button>
                    </div>
                `;
                
                // Set default values
                document.getElementById('totalProducts').textContent = '0';
                document.getElementById('totalOrders').textContent = '0';
                document.getElementById('totalCustomers').textContent = '0';
                document.getElementById('revenueToday').textContent = '0.00';
                
                showNotification('Error loading dashboard data', 'error');
            }
        }

        // Load products
        async function loadProducts() {
            try {
                showLoading('productsList', 'Loading products...');
                console.log('📦 Fetching products...');
                
                const response = await fetch('/api/admin/products');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📦 Products response:', data);
                
                if (data.success) {
                    const productsList = document.getElementById('productsList');
                    if (data.data && data.data.length > 0) {
                        productsList.innerHTML = `
                            <table class="products-table">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Name</th>
                                        <th>Price</th>
                                        <th>Category</th>
                                        <th>Stock</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.data.map(product => `
                                        <tr>
                                            <td>
                                                <img src="${product.image || '/images/default-food.jpg'}" alt="${product.name}" class="product-image" 
                                                     onerror="this.src='/images/default-food.jpg'">
                                            </td>
                                            <td>${product.name}</td>
                                            <td>₱${product.price?.toFixed(2) || '0.00'}</td>
                                            <td>${product.category}</td>
                                            <td>${product.stock}</td>
                                            <td>
                                                <span class="status-badge ${product.isAvailable ? 'status-available' : 'status-unavailable'}">
                                                    ${product.isAvailable ? 'Available' : 'Unavailable'}
                                                </span>
                                            </td>
                                            <td>
                                                <button class="action-btn edit-btn" onclick="editProduct('${product._id}')">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="action-btn delete-btn" onclick="deleteProduct('${product._id}')">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        `;
                    } else {
                        productsList.innerHTML = '<p>No products found. Add your first product!</p>';
                    }
                    
                    showNotification('Products loaded successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to load products');
                }
            } catch (error) {
                console.error('❌ Error loading products:', error);
                document.getElementById('productsList').innerHTML = `
                    <div class="error-message">
                        <p>Error loading products: ${error.message}</p>
                        <button onclick="loadProducts()" style="background: var(--primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                            Try Again
                        </button>
                    </div>
                `;
                showNotification('Error loading products', 'error');
            }
        }

        // Load orders
        async function loadOrders() {
            try {
                showLoading('ordersList', 'Loading orders...');
                console.log('📋 Fetching orders...');
                
                const response = await fetch('/api/admin/orders');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📋 Orders response:', data);
                
                if (data.success) {
                    const ordersList = document.getElementById('ordersList');
                    if (data.data && data.data.length > 0) {
                        ordersList.innerHTML = `
                            <div class="orders-list">
                                ${data.data.map(order => `
                                    <div class="order-card">
                                        <div class="order-header">
                                            <div class="order-number">Order #${order.orderNumber}</div>
                                            <div class="order-status status-${order.status}">${order.status.toUpperCase()}</div>
                                        </div>
                                        <div class="order-details">
                                            <div class="order-items">
                                                ${order.items ? order.items.map(item => 
                                                    `${item.quantity}x ${item.product?.name || 'Item'}`
                                                ).join(', ') : 'No items'}
                                            </div>
                                            <div class="order-total">₱${order.totalAmount?.toFixed(2) || '0.00'}</div>
                                            <div class="order-date">${new Date(order.orderDate).toLocaleDateString()}</div>
                                        </div>
                                        <div class="order-payment-status" style="margin-top: 8px; font-size: 14px; color: ${order.paymentStatus === 'paid' ? 'var(--success)' : 'var(--warning)'};">
                                            Payment: ${order.paymentStatus?.toUpperCase() || 'PENDING'}
                                        </div>
                                        ${order.customer ? `
                                        <div style="margin-top: 8px; font-size: 14px; color: var(--gray);">
                                            Customer: ${order.customer.name} (${order.customer.email})
                                        </div>
                                        ` : ''}
                                        <div style="margin-top: 12px; display: flex; gap: 8px; flex-wrap: wrap;">
                                            ${order.status === 'pending' ? `
                                                <button class="action-btn edit-btn" onclick="updateOrderStatus('${order._id}', 'confirmed')">
                                                    Confirm Order
                                                </button>
                                            ` : ''}
                                            ${order.status === 'confirmed' ? `
                                                <button class="action-btn edit-btn" onclick="updateOrderStatus('${order._id}', 'preparing')">
                                                    Start Preparing
                                                </button>
                                            ` : ''}
                                            ${order.status === 'preparing' ? `
                                                <button class="action-btn edit-btn" onclick="updateOrderStatus('${order._id}', 'ready')">
                                                    Mark as Ready
                                                </button>
                                            ` : ''}
                                            ${order.status === 'ready' ? `
                                                <button class="action-btn edit-btn" onclick="updateOrderStatus('${order._id}', 'completed')">
                                                    Complete Order
                                                </button>
                                            ` : ''}
                                            ${['pending', 'confirmed'].includes(order.status) ? `
                                                <button class="action-btn delete-btn" onclick="updateOrderStatus('${order._id}', 'cancelled')">
                                                    Cancel Order
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        `;
                    } else {
                        ordersList.innerHTML = '<p>No orders found.</p>';
                    }
                    
                    showNotification('Orders loaded successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to load orders');
                }
            } catch (error) {
                console.error('❌ Error loading orders:', error);
                document.getElementById('ordersList').innerHTML = `
                    <div class="error-message">
                        <p>Error loading orders: ${error.message}</p>
                        <button onclick="loadOrders()" style="background: var(--primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                            Try Again
                        </button>
                    </div>
                `;
                showNotification('Error loading orders', 'error');
            }
        }

        // Load analytics
        async function loadAnalytics(period = '7d') {
            try {
                console.log(`📈 Fetching analytics for period: ${period}`);
                
                const response = await fetch(`/api/admin/analytics/sales?period=${period}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📈 Analytics response:', data);
                
                if (data.success) {
                    renderSalesChart(data.data, period);
                    showNotification('Analytics data loaded successfully', 'success');
                } else {
                    // Fallback to sample data if API fails
                    renderSalesChart(generateSampleData(), period);
                    showNotification('Using sample data for analytics', 'info');
                }
            } catch (error) {
                console.error('❌ Error loading analytics:', error);
                // Use sample data if API fails
                renderSalesChart(generateSampleData(), period);
                showNotification('Using sample data for analytics', 'info');
            }
        }

        // Generate sample data for analytics
        function generateSampleData() {
            const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
            return days.map(day => ({
                _id: day,
                totalSales: Math.floor(Math.random() * 10000) + 5000,
                orderCount: Math.floor(Math.random() * 20) + 5
            }));
        }

        // Render sales chart
        function renderSalesChart(salesData, period = '7d') {
            const ctx = document.getElementById('salesChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (salesChart) {
                salesChart.destroy();
            }
            
            // Prepare data for chart
            const labels = salesData.map(item => item._id);
            const sales = salesData.map(item => item.totalSales);
            const orders = salesData.map(item => item.orderCount);
            
            salesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Sales (₱)',
                            data: sales,
                            backgroundColor: 'rgba(102, 126, 234, 0.7)',
                            borderColor: 'rgba(102, 126, 234, 1)',
                            borderWidth: 1,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Orders',
                            data: orders,
                            backgroundColor: 'rgba(118, 75, 162, 0.7)',
                            borderColor: 'rgba(118, 75, 162, 1)',
                            borderWidth: 1,
                            type: 'line',
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Sales (₱)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Orders'
                            },
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: `Sales Analytics - Last ${period === '7d' ? '7 Days' : period === '30d' ? '30 Days' : '90 Days'}`
                        }
                    }
                }
            });
        }

        // Helper function to show loading state
        function showLoading(elementId, message = 'Loading...') {
            const element = document.getElementById(elementId);
            if (element) {
                element.innerHTML = `
                    <div class="loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>${message}</p>
                    </div>
                `;
            }
        }

        // Product form functions
        function showAddProductForm() {
            document.getElementById('addProductForm').style.display = 'block';
            document.getElementById('productFormTitle').textContent = 'Add New Product';
            document.getElementById('submitButtonText').textContent = 'Save Product';
            currentEditingProduct = null;
            document.getElementById('productForm').reset();
        }

        function hideAddProductForm() {
            document.getElementById('addProductForm').style.display = 'none';
            document.getElementById('productForm').reset();
            currentEditingProduct = null;
        }

        // Handle product form submission
        document.getElementById('productForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            formData.append('name', document.getElementById('name').value);
            formData.append('description', document.getElementById('description').value);
            formData.append('price', parseFloat(document.getElementById('price').value));
            formData.append('category', document.getElementById('category').value);
            formData.append('stock', parseInt(document.getElementById('stock').value));
            formData.append('spiceLevel', document.getElementById('spiceLevel').value);
            formData.append('ingredients', document.getElementById('ingredients').value);
            
            // Add image file if selected
            const imageFile = document.getElementById('imageFile').files[0];
            if (imageFile) {
                formData.append('image', imageFile);
            }
            
            try {
                const url = currentEditingProduct 
                    ? `/api/admin/products/${currentEditingProduct}`
                    : '/api/admin/products';
                
                const method = currentEditingProduct ? 'PUT' : 'POST';
                
                console.log(`🔄 ${method} request to: ${url}`, formData);
                
                const response = await fetch(url, {
                    method: method,
                    body: formData // Don't set Content-Type header for FormData
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification(
                        currentEditingProduct ? 'Product updated successfully!' : 'Product added successfully!', 
                        'success'
                    );
                    hideAddProductForm();
                    loadProducts();
                    loadDashboardStats(); // Refresh stats
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error saving product:', error);
                showNotification('Error saving product: ' + error.message, 'error');
            }
        });

        // Edit product
        async function editProduct(productId) {
            try {
                console.log(`📝 Editing product: ${productId}`);
                
                const response = await fetch(`/api/admin/products/${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    const product = data.data;
                    currentEditingProduct = productId;
                    
                    // Fill form with product data
                    document.getElementById('name').value = product.name;
                    document.getElementById('description').value = product.description;
                    document.getElementById('price').value = product.price;
                    document.getElementById('category').value = product.category;
                    document.getElementById('stock').value = product.stock;
                    document.getElementById('spiceLevel').value = product.spiceLevel;
                    document.getElementById('ingredients').value = product.ingredients?.join(', ') || '';
                    
                    // Handle image field
                    const currentImageDiv = document.getElementById('currentImage');
                    const currentImagePreview = document.getElementById('currentImagePreview');
                    if (product.image && product.image !== '/images/default-food.jpg') {
                        currentImagePreview.src = product.image;
                        currentImageDiv.style.display = 'block';
                    } else {
                        currentImageDiv.style.display = 'none';
                    }
                    // Clear file input
                    document.getElementById('imageFile').value = '';
                    
                    // Update form title and button
                    document.getElementById('productFormTitle').textContent = 'Edit Product';
                    document.getElementById('submitButtonText').textContent = 'Update Product';
                    
                    // Show form
                    document.getElementById('addProductForm').style.display = 'block';
                    document.getElementById('addProductForm').scrollIntoView({ behavior: 'smooth' });
                    
                    showNotification('Product data loaded for editing', 'info');
                } else {
                    throw new Error(data.message || 'Failed to load product');
                }
            } catch (error) {
                console.error('❌ Error loading product:', error);
                showNotification('Error loading product details: ' + error.message, 'error');
            }
        }

        // Delete product
        async function deleteProduct(productId) {
            if (!confirm('Are you sure you want to delete this product? This action cannot be undone.')) {
                return;
            }
            
            try {
                console.log(`🗑️ Deleting product: ${productId}`);
                
                const response = await fetch(`/api/admin/products/${productId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Product deleted successfully!', 'success');
                    loadProducts();
                    loadDashboardStats(); // Refresh stats
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error deleting product:', error);
                showNotification('Error deleting product: ' + error.message, 'error');
            }
        }

        // Update order status
        async function updateOrderStatus(orderId, status) {
            try {
                console.log(`🔄 Updating order ${orderId} status to: ${status}`);
                
                const response = await fetch(`/api/admin/orders/${orderId}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status })
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Order status updated successfully!', 'success');
                    loadOrders();
                    loadDashboardStats(); // Refresh dashboard
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error updating order status:', error);
                showNotification('Error updating order status: ' + error.message, 'error');
            }
        }

        // Notification system
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotification = document.querySelector('.notification');
            if (existingNotification) {
                existingNotification.remove();
            }

            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <span>${message}</span>
                <button onclick="this.parentElement.remove()" style="background: none; border: none; font-size: 18px; cursor: pointer; color: inherit;">&times;</button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
    </script>
</body>
</html>