<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Dashboard - Chil's Korean Store</title>
    <link rel="icon" type="image/png" href="/favicon/favicon.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Your existing CSS styles remain the same */
        :root {
            --primary: #667eea;
            --primary-dark: #5a6fd8;
            --secondary: #764ba2;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --dark: #1f2937;
            --light: #f8fafc;
            --gray: #6b7280;
            --gray-light: #e5e7eb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: #f1f5f9;
            color: var(--dark);
            line-height: 1.6;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 260px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 0;
            transition: all 0.3s;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .sidebar-header h1 {
            font-size: 20px;
            font-weight: 700;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s;
            border-left: 3px solid transparent;
            cursor: pointer;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-left-color: white;
        }

        .nav-item i {
            width: 20px;
            margin-right: 12px;
            font-size: 16px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 0;
            overflow-y: auto;
        }

        .top-bar {
            background: white;
            padding: 16px 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .logout-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: background 0.3s;
            text-decoration: none;
            font-size: 14px;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        /* User Dropdown */
        .user-dropdown {
            position: relative;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
            padding: 6px 12px;
            border-radius: 6px;
            transition: background 0.3s;
        }

        .user-info:hover {
            background: #f8f9fa;
        }

        .dropdown-arrow {
            color: var(--gray);
            font-size: 12px;
            transition: transform 0.3s;
        }

        .user-info:hover .dropdown-arrow {
            transform: rotate(180deg);
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid var(--gray-light);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 200px;
            z-index: 1000;
            display: none;
            margin-top: 8px;
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            color: var(--dark);
            text-decoration: none;
            transition: background 0.3s;
            border-bottom: 1px solid #f8f9fa;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            background: #f8f9fa;
        }

        .dropdown-item i {
            width: 16px;
            text-align: center;
            color: var(--gray);
        }

        .dropdown-item.logout {
            color: var(--danger);
        }

        .dropdown-item.logout i {
            color: var(--danger);
        }

        /* Content Area */
        .content-area {
            padding: 24px;
        }

        .welcome-banner {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            padding: 24px;
            border-radius: 12px;
            margin-bottom: 24px;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .welcome-banner h2 {
            font-size: 24px;
            margin-bottom: 8px;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            display: flex;
            align-items: center;
            gap: 16px;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .stat-icon.orders { background: rgba(102, 126, 234, 0.1); color: var(--primary); }
        .stat-icon.pending { background: rgba(245, 158, 11, 0.1); color: var(--warning); }
        .stat-icon.spent { background: rgba(16, 185, 129, 0.1); color: var(--success); }
        .stat-icon.cart { background: rgba(239, 68, 68, 0.1); color: var(--danger); }

        .stat-info h3 {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 4px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-number {
            font-size: 28px;
            font-weight: 700;
            color: var(--dark);
        }

        /* Dashboard Sections */
        .dashboard-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            margin-bottom: 24px;
            overflow: hidden;
        }

        .section-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--gray-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-header h2 {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
        }

        .section-content {
            padding: 24px;
        }

        /* Tabs */
        .nav-tabs {
            display: flex;
            border-bottom: 1px solid var(--gray-light);
            margin-bottom: 20px;
        }

        .nav-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            border-bottom: 2px solid transparent;
            font-weight: 500;
            color: var(--gray);
        }

        .nav-tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Menu Grid */
        .menu-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }

        .menu-item {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 3px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .menu-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 25px rgba(0,0,0,0.15);
        }

        .menu-item-image {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 50px;
        }

        .menu-item-content {
            padding: 20px;
        }

        .menu-item h3 {
            color: var(--dark);
            margin-bottom: 10px;
            font-size: 18px;
        }

        .menu-item .description {
            color: var(--gray);
            font-size: 14px;
            margin-bottom: 15px;
            line-height: 1.4;
        }

        .menu-item .price {
            color: var(--primary);
            font-weight: bold;
            font-size: 20px;
            margin-bottom: 15px;
        }

        .menu-item-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .quantity-btn {
            background: #f8f9fa;
            border: 1px solid var(--gray-light);
            width: 30px;
            height: 30px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity {
            font-weight: bold;
            min-width: 30px;
            text-align: center;
        }

        .add-to-cart-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .add-to-cart-btn:hover {
            background: var(--primary-dark);
        }

        /* Orders List */
        .orders-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .order-card {
            border: 1px solid var(--gray-light);
            border-radius: 8px;
            padding: 16px;
            transition: box-shadow 0.3s;
        }

        .order-card:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .order-number {
            font-weight: 600;
            color: var(--dark);
        }

        .order-status {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-pending { background: #fef3c7; color: #d97706; }
        .status-confirmed { background: #dbeafe; color: #2563eb; }
        .status-preparing { background: #fce7f3; color: #db2777; }
        .status-ready { background: #dcfce7; color: #16a34a; }
        .status-completed { background: #f0fdf4; color: #15803d; }
        .status-cancelled { background: #fef2f2; color: #dc2626; }

        .order-details {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr;
            gap: 16px;
        }

        .order-items {
            color: var(--gray);
        }

        .order-total {
            font-weight: 600;
        }

        .order-date {
            color: var(--gray);
            font-size: 14px;
        }

        .order-actions {
            display: flex;
            gap: 10px;
            margin-top: 12px;
        }

        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }

        .pay-btn {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .track-btn {
            background: rgba(102, 126, 234, 0.1);
            color: var(--primary);
        }

        .action-btn:hover {
            transform: translateY(-1px);
        }

        /* Profile Section */
        .profile-section {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .profile-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .info-group label {
            font-weight: bold;
            color: var(--dark);
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .info-group p {
            color: var(--gray);
            padding: 12px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid var(--gray-light);
            margin: 0;
            font-size: 14px;
        }

        .info-group .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--gray-light);
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s, box-shadow 0.3s;
            background: white;
        }

        .info-group .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .info-group .form-control:disabled {
            background: #f8f9fa;
            color: var(--gray);
            cursor: not-allowed;
        }

        .info-group small {
            color: var(--gray);
            font-size: 12px;
            margin-top: 4px;
            display: block;
        }

        /* Menu Filters */
        .menu-filters {
            margin: 20px 0;
        }

        .filter-btn {
            padding: 8px 16px;
            margin: 0 5px 10px 0;
            background: #f8f9fa;
            border: 1px solid var(--gray-light);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .filter-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .filter-btn:hover:not(.active) {
            background: #e9ecef;
        }

        /* Cart Icon */
        .cart-icon {
            position: relative;
            cursor: pointer;
            font-size: 20px;
            color: var(--dark);
        }

        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--danger);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 20px;
            border-bottom: 1px solid var(--gray-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            color: var(--dark);
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--gray);
        }

        .modal-body {
            padding: 20px;
        }

        .cart-items {
            margin-bottom: 20px;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid var(--gray-light);
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-total {
            font-weight: bold;
            font-size: 18px;
            text-align: right;
            margin-bottom: 20px;
        }

        .checkout-btn {
            width: 100%;
            padding: 12px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }

        .checkout-btn:hover {
            background: var(--primary-dark);
        }

        .submit-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .submit-btn:hover {
            background: var(--primary-dark);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .submit-btn:disabled:hover {
            background: var(--primary);
            transform: none;
        }

        /* QR Code Modal */
        .qr-modal .modal-content {
            max-width: 400px;
            text-align: center;
        }

        .qr-code {
            width: 200px;
            height: 200px;
            margin: 20px auto;
            border: 1px solid var(--gray-light);
            padding: 10px;
            background: white;
        }

        .payment-details {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 15px;
            max-width: 400px;
            animation: slideIn 0.3s ease-out;
        }

        .notification-success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid var(--success);
        }

        .notification-error {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid var(--danger);
        }

        .notification-info {
            background: #d1ecf1;
            color: #0c5460;
            border-left: 4px solid var(--primary);
        }

        .notification button {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: inherit;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
            }
            
            .profile-info {
                grid-template-columns: 1fr;
            }
            
            .order-details {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .menu-grid {
                grid-template-columns: 1fr;
            }
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }

        .error-message {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 16px;
            border-radius: 8px;
            margin: 16px 0;
            text-align: center;
        }

        /* Additional styles for new elements */
        .stock-info {
            font-size: 12px;
            margin-bottom: 10px;
        }

        .order-payment-status {
            margin-top: 8px;
            font-size: 14px;
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        button:disabled:hover {
            transform: none;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-utensils"></i>
                <h1>Chil's Korean Store</h1>
            </div>
            <div class="sidebar-nav">
                <a class="nav-item active" data-tab="menu">
                    <i class="fas fa-utensils"></i>
                    Browse Menu
                </a>
                <a class="nav-item" data-tab="orders">
                    <i class="fas fa-receipt"></i>
                    My Orders
                </a>
                <a class="nav-item" data-tab="profile">
                    <i class="fas fa-user"></i>
                    My Profile
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="top-bar">
                <h2>Customer Dashboard</h2>
                <div class="user-menu">
                    <div class="cart-icon" onclick="toggleCart()">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-count" id="cartCount">0</span>
                    </div>
                    <div class="user-dropdown">
                        <div class="user-info" onclick="toggleUserDropdown()">
                            <div class="user-avatar">
                                <!-- User initial will be dynamically set -->
                                C
                            </div>
                            <span id="welcomeUser">Welcome, Customer!</span>
                            <i class="fas fa-chevron-down dropdown-arrow"></i>
                        </div>
                        <div class="dropdown-menu" id="userDropdownMenu">
                            <a href="#orders" class="dropdown-item" onclick="switchToOrdersTab()">
                                <i class="fas fa-receipt"></i>
                                My Orders
                            </a>
                            <a href="/auth/logout" class="dropdown-item logout">
                                <i class="fas fa-sign-out-alt"></i>
                                Logout
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-area">
                <!-- Welcome Banner -->
                <div class="welcome-banner">
                    <h2>Welcome to Chil's Korean Store! 🎉</h2>
                    <p>Discover authentic Korean flavors delivered fresh to your doorstep</p>
                </div>

                <!-- Stats Grid -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon orders">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Orders</h3>
                            <div class="stat-number" id="totalOrders">0</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon pending">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Pending Orders</h3>
                            <div class="stat-number" id="pendingOrders">0</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon spent">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Spent</h3>
                            <div class="stat-number">₱<span id="totalSpent">0.00</span></div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon cart">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Cart Items</h3>
                            <div class="stat-number" id="cartItemsCount">0</div>
                        </div>
                    </div>
                </div>

                <!-- Dashboard Sections -->
                <div class="dashboard-section">
                    <div class="section-header">
                        <h2>Customer Dashboard</h2>
                    </div>
                    <div class="section-content">
                        <!-- Navigation Tabs -->
                        <div class="nav-tabs">
                            <button class="nav-tab active" data-tab="menu">Menu</button>
                            <button class="nav-tab" data-tab="orders">My Orders</button>
                            <button class="nav-tab" data-tab="profile">My Profile</button>
                        </div>

                        <!-- Menu Tab -->
                        <div class="tab-content active" id="menu-tab">
                            <h3>Our Delicious Menu</h3>
                            <div class="menu-filters">
                                <button class="filter-btn active" onclick="filterMenu('all')">All</button>
                                <button class="filter-btn" onclick="filterMenu('main-course')">Main Course</button>
                                <button class="filter-btn" onclick="filterMenu('side-dish')">Side Dishes</button>
                                <button class="filter-btn" onclick="filterMenu('beverage')">Beverages</button>
                                <button class="filter-btn" onclick="filterMenu('dessert')">Desserts</button>
                            </div>
                            <div class="menu-grid" id="menuGrid">
                                <div class="loading">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading menu...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Orders Tab -->
                        <div class="tab-content" id="orders-tab">
                            <h3>My Order History</h3>
                            <div class="orders-list" id="ordersList">
                                <div class="loading">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>Loading orders...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Profile Tab -->
                        <div class="tab-content" id="profile-tab">
                            <h3>My Profile</h3>
                            <div class="profile-section">
                                <div class="profile-info" id="profileInfo">
                                    <!-- View Mode (Default) -->
                                    <div id="profileViewMode">
                                        <div class="info-group">
                                            <label>Full Name</label>
                                            <p id="profileName">Not provided</p>
                                        </div>
                                        <div class="info-group">
                                            <label>Email</label>
                                            <p id="profileEmail">Not provided</p>
                                        </div>
                                        <div class="info-group">
                                            <label>Phone</label>
                                            <p id="profilePhone">Not provided</p>
                                        </div>
                                        <div class="info-group">
                                            <label>Address</label>
                                            <p id="profileAddress">Not provided</p>
                                        </div>
                                        <div style="grid-column: 1 / -1; text-align: center; margin-top: 24px;">
                                            <button class="submit-btn" onclick="enableEditMode()">
                                                <i class="fas fa-edit"></i>
                                                Edit Profile
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Edit Mode (Initially Hidden) -->
                                    <div id="profileEditMode" style="display: none;">
                                        <form id="profileUpdateForm">
                                            <div class="info-group">
                                                <label for="editName">Full Name</label>
                                                <input type="text" id="editName" name="name" class="form-control" required>
                                            </div>
                                            <div class="info-group">
                                                <label for="editEmail">Email</label>
                                                <input type="email" id="editEmail" class="form-control" value="" disabled>
                                                <small>Email cannot be changed</small>
                                            </div>
                                            <div class="info-group">
                                                <label for="editPhone">Phone</label>
                                                <input type="tel" id="editPhone" name="phone" class="form-control" placeholder="+63 XXX XXX XXXX">
                                            </div>
                                            <div class="info-group">
                                                <label for="editStreet">Street Address</label>
                                                <input type="text" id="editStreet" name="street" class="form-control" required>
                                            </div>
                                            <div class="info-group">
                                                <label for="editCity">City</label>
                                                <input type="text" id="editCity" name="city" class="form-control" required>
                                            </div>
                                            <div style="grid-column: 1 / -1; display: flex; gap: 12px; justify-content: center; margin-top: 24px;">
                                                <button type="submit" class="submit-btn">
                                                    <i class="fas fa-save"></i>
                                                    Save Changes
                                                </button>
                                                <button type="button" class="logout-btn" onclick="disableEditMode()">
                                                    <i class="fas fa-times"></i>
                                                    Cancel
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cart Modal -->
    <div class="modal" id="cartModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Your Cart</h3>
                <button class="close-modal" onclick="toggleCart()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="cart-items" id="cartItems">
                    <p>Your cart is empty</p>
                </div>
                <div class="cart-total" id="cartTotal">Total: ₱0.00</div>
                <button class="checkout-btn" onclick="checkout()">Proceed to Checkout</button>
            </div>
        </div>
    </div>

    <!-- QR Code Modal -->
    <div class="modal qr-modal" id="qrModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Pay with GCash</h3>
                <button class="close-modal" onclick="closeQRModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="qrCodeContainer">
                    <div class="qr-code">
                        <p>QR Code will appear here</p>
                    </div>
                </div>
                <div class="payment-details">
                    <p><strong>Reference:</strong> <span id="paymentReference">-</span></p>
                    <p><strong>Amount:</strong> ₱<span id="paymentAmount">0.00</span></p>
                </div>
                <button class="checkout-btn" onclick="confirmPayment()">I've Completed Payment</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let currentOrderId = null;
        let currentPaymentId = null;
        let products = [];

        // User dropdown functionality
        function toggleUserDropdown() {
            const dropdown = document.getElementById('userDropdownMenu');
            dropdown.classList.toggle('show');
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function closeDropdown(e) {
                if (!e.target.closest('.user-dropdown')) {
                    dropdown.classList.remove('show');
                    document.removeEventListener('click', closeDropdown);
                }
            });
        }

        // Switch to orders tab
        function switchToOrdersTab() {
            // Close dropdown
            document.getElementById('userDropdownMenu').classList.remove('show');
            
            // Switch to orders tab
            document.querySelectorAll('.nav-item, .nav-tab').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector('[data-tab="orders"]').classList.add('active');
            document.getElementById('orders-tab').classList.add('active');
            document.getElementById('menu-tab').classList.remove('active');
            document.getElementById('profile-tab').classList.remove('active');
            loadOrders();
        }

        // Tab management
        document.querySelectorAll('.nav-item, .nav-tab').forEach(item => {
            item.addEventListener('click', function() {
                const tabName = this.getAttribute('data-tab');
                
                // Update sidebar navigation
                document.querySelectorAll('.nav-item').forEach(nav => {
                    nav.classList.remove('active');
                });
                this.classList.add('active');
                
                // Update content tabs
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.getElementById(tabName + '-tab').classList.add('active');
                
                // Update top bar tabs
                document.querySelectorAll('.nav-tab').forEach(tab => {
                    tab.classList.remove('active');
                    if (tab.getAttribute('data-tab') === tabName) {
                        tab.classList.add('active');
                    }
                });
                
                // Load data for the tab
                if (tabName === 'menu') {
                    loadMenu();
                } else if (tabName === 'orders') {
                    loadOrders();
                }
            });
        });

        // Load dashboard stats
        async function loadDashboardStats() {
            try {
                const ordersResponse = await fetch('/api/customer/orders');
                if (ordersResponse.ok) {
                    const ordersData = await ordersResponse.json();
                    if (ordersData.success) {
                        const totalOrders = ordersData.data.length;
                        const pendingOrders = ordersData.data.filter(order => 
                            ['pending', 'confirmed', 'preparing'].includes(order.status)
                        ).length;
                        const totalSpent = ordersData.data
                            .filter(order => order.paymentStatus === 'paid')
                            .reduce((sum, order) => sum + order.totalAmount, 0);

                        document.getElementById('totalOrders').textContent = totalOrders;
                        document.getElementById('pendingOrders').textContent = pendingOrders;
                        document.getElementById('totalSpent').textContent = totalSpent.toFixed(2);
                    }
                }
                updateCartCount();
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                // Set default values
                document.getElementById('totalOrders').textContent = '0';
                document.getElementById('pendingOrders').textContent = '0';
                document.getElementById('totalSpent').textContent = '0.00';
            }
        }

        // Menu filtering
        async function filterMenu(category) {
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            try {
                let url = '/api/customer/menu';
                if (category !== 'all') {
                    url = `/api/customer/menu/category/${category}`;
                }
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success) {
                    renderMenuItems(data.data);
                }
            } catch (error) {
                console.error('Error filtering menu:', error);
                showNotification('Error loading menu', 'error');
            }
        }

        // Load menu items
        async function loadMenu() {
            try {
                console.log('🔄 Loading menu...');
                const response = await fetch('/api/customer/menu');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📦 Menu response:', data);
                
                if (data.success) {
                    products = data.data;
                    renderMenuItems(data.data);
                    console.log(`✅ Loaded ${data.data.length} products`);
                } else {
                    throw new Error(data.message || 'Failed to load menu');
                }
            } catch (error) {
                console.error('❌ Error loading menu:', error);
                document.getElementById('menuGrid').innerHTML = `
                    <div class="error-message">
                        <h3>Error loading menu</h3>
                        <p>${error.message}</p>
                        <button onclick="loadMenu()" style="background: var(--primary); color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                            Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Render menu items
        function renderMenuItems(menuItems) {
            const menuGrid = document.getElementById('menuGrid');
            if (menuItems && menuItems.length > 0) {
                menuGrid.innerHTML = menuItems.map(product => `
                    <div class="menu-item" data-category="${product.category}">
                        <div class="menu-item-image">
                            ${product.image ? 
                                `<img src="${product.image}" alt="${product.name}" style="width: 100%; height: 100%; object-fit: cover;">` :
                                `<i class="fas fa-utensils"></i>`
                            }
                        </div>
                        <div class="menu-item-content">
                            <h3>${product.name}</h3>
                            <p class="description">${product.description}</p>
                            <div class="price">₱${product.price.toFixed(2)}</div>
                            <div class="stock-info" style="font-size: 12px; color: ${product.stock > 10 ? 'var(--success)' : product.stock > 0 ? 'var(--warning)' : 'var(--danger)'}; margin-bottom: 10px;">
                                ${product.stock > 10 ? 'In Stock' : product.stock > 0 ? `Only ${product.stock} left!` : 'Out of Stock'}
                            </div>
                            <div class="menu-item-footer">
                                <div class="quantity-controls">
                                    <button class="quantity-btn" onclick="changeQuantity('${product._id}', -1)" ${product.stock === 0 ? 'disabled' : ''}>-</button>
                                    <span class="quantity" id="quantity-${product._id}">1</span>
                                    <button class="quantity-btn" onclick="changeQuantity('${product._id}', 1)" ${product.stock === 0 ? 'disabled' : ''}>+</button>
                                </div>
                                <button class="add-to-cart-btn" onclick="addToCart('${product._id}', '${product.name.replace(/'/g, "\\'")}', ${product.price}, ${product.stock})" ${product.stock === 0 ? 'disabled' : ''}>
                                    ${product.stock === 0 ? 'Out of Stock' : 'Add to Cart'}
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                menuGrid.innerHTML = '<p>No products available at the moment.</p>';
            }
        }

        // Cart management
        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cartCount').textContent = totalItems;
            document.getElementById('cartItemsCount').textContent = totalItems;
        }

        function changeQuantity(productId, change) {
            const quantityElement = document.getElementById(`quantity-${productId}`);
            let quantity = parseInt(quantityElement.textContent) + change;
            quantity = Math.max(1, quantity);
            
            // Check stock limit
            const product = products.find(p => p._id === productId);
            if (product && quantity > product.stock) {
                showNotification(`Only ${product.stock} items available in stock`, 'warning');
                quantity = product.stock;
            }
            
            quantityElement.textContent = quantity;
        }

        function addToCart(productId, productName, productPrice, productStock) {
            const quantity = parseInt(document.getElementById(`quantity-${productId}`).textContent);

            // Check stock availability
            if (quantity > productStock) {
                showNotification(`Only ${productStock} items available in stock`, 'error');
                return;
            }

            const existingItem = cart.find(item => item.productId === productId);
            if (existingItem) {
                if (existingItem.quantity + quantity > productStock) {
                    showNotification(`Cannot add more than available stock (${productStock})`, 'error');
                    return;
                }
                existingItem.quantity += quantity;
            } else {
                cart.push({
                    productId,
                    name: productName,
                    price: productPrice,
                    quantity
                });
            }

            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartCount();
            showNotification('Item added to cart!', 'success');
            
            // Reset quantity to 1
            document.getElementById(`quantity-${productId}`).textContent = '1';
        }

        function toggleCart() {
            const modal = document.getElementById('cartModal');
            if (modal.style.display === 'flex') {
                modal.style.display = 'none';
            } else {
                modal.style.display = 'flex';
                renderCart();
            }
        }

        function renderCart() {
            const cartItems = document.getElementById('cartItems');
            const cartTotal = document.getElementById('cartTotal');

            if (cart.length === 0) {
                cartItems.innerHTML = '<p>Your cart is empty</p>';
                cartTotal.textContent = 'Total: ₱0.00';
                return;
            }

            let total = 0;
            cartItems.innerHTML = cart.map(item => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                return `
                    <div class="cart-item">
                        <div>
                            <strong>${item.name}</strong><br>
                            <small>₱${item.price.toFixed(2)} x ${item.quantity}</small>
                        </div>
                        <div>
                            <button onclick="removeFromCart('${item.productId}')" style="background: var(--danger); color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">Remove</button>
                        </div>
                    </div>
                `;
            }).join('');

            cartTotal.textContent = `Total: ₱${total.toFixed(2)}`;
        }

        function removeFromCart(productId) {
            cart = cart.filter(item => item.productId !== productId);
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartCount();
            renderCart();
            showNotification('Item removed from cart', 'info');
        }

        // Checkout and payment - FIXED VERSION
        async function checkout() {
            if (cart.length === 0) {
                showNotification('Your cart is empty!', 'error');
                return;
            }

            try {
                const orderData = {
                    items: cart.map(item => ({
                        productId: item.productId,
                        quantity: item.quantity
                    })),
                    deliveryAddress: {
                        street: "123 Main St",
                        city: "Manila",
                        zipCode: "1000"
                    },
                    specialInstructions: ""
                };

                console.log('🛒 Sending order:', orderData);

                const response = await fetch('/api/customer/orders', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(orderData)
                });

                const data = await response.json();
                console.log('📦 Order response:', data);
                
                if (data.success) {
                    currentOrderId = data.data._id;
                    showNotification('Order placed successfully!', 'success');
                    toggleCart();
                    cart = [];
                    localStorage.setItem('cart', JSON.stringify(cart));
                    updateCartCount();
                    loadDashboardStats();
                    
                    // Show payment options
                    setTimeout(() => {
                        showQRPayment(data.data._id, data.data.totalAmount);
                    }, 1000);
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error placing order:', error);
                showNotification('Error placing order: ' + error.message, 'error');
            }
        }

        async function showQRPayment(orderId, amount) {
            try {
                const response = await fetch(`/api/customer/orders/${orderId}/pay`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                if (data.success) {
                    currentPaymentId = data.data.payment._id;
                    document.getElementById('qrCodeContainer').innerHTML = 
                        `<img src="${data.data.qrCode}" alt="GCash QR Code" style="width: 200px; height: 200px;">`;
                    document.getElementById('paymentReference').textContent = data.data.gcashReference;
                    document.getElementById('paymentAmount').textContent = amount.toFixed(2);
                    
                    document.getElementById('qrModal').style.display = 'flex';
                } else {
                    showNotification('Error generating payment: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error generating payment:', error);
                showNotification('Error processing payment', 'error');
            }
        }

        function closeQRModal() {
            document.getElementById('qrModal').style.display = 'none';
        }

        async function confirmPayment() {
            try {
                const response = await fetch(`/api/customer/payments/${currentPaymentId}/confirm`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Payment confirmed! Your order is being processed.', 'success');
                    closeQRModal();
                    loadOrders();
                    loadDashboardStats();
                } else {
                    showNotification('Error confirming payment: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error confirming payment:', error);
                showNotification('Error confirming payment', 'error');
            }
        }

        // Load customer orders
        async function loadOrders() {
            try {
                const ordersList = document.getElementById('ordersList');
                ordersList.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i><p>Loading orders...</p></div>';

                const response = await fetch('/api/customer/orders');
                const data = await response.json();
                
                if (data.success) {
                    if (data.data && data.data.length > 0) {
                        ordersList.innerHTML = data.data.map(order => `
                            <div class="order-card">
                                <div class="order-header">
                                    <div class="order-number">Order #${order.orderNumber}</div>
                                    <div class="order-status status-${order.status}">${order.status.toUpperCase()}</div>
                                </div>
                                <div class="order-details">
                                    <div class="order-items">
                                        ${order.items.map(item => 
                                            `${item.quantity}x ${item.product?.name || 'Item'}`
                                        ).join(', ')}
                                    </div>
                                    <div class="order-total">₱${order.totalAmount.toFixed(2)}</div>
                                    <div class="order-date">${new Date(order.orderDate).toLocaleDateString()}</div>
                                </div>
                                <div class="order-payment-status" style="margin-top: 8px; font-size: 14px; color: ${order.paymentStatus === 'paid' ? 'var(--success)' : 'var(--warning)'};">
                                    Payment: ${order.paymentStatus.toUpperCase()}
                                </div>
                                <div class="order-actions">
                                    ${order.status === 'pending' && order.paymentStatus === 'pending' ? 
                                        `<button class="action-btn pay-btn" onclick="showQRPayment('${order._id}', ${order.totalAmount})">
                                            Pay with GCash
                                        </button>` : 
                                        ''
                                    }
                                    ${order.paymentStatus === 'paid' && order.status !== 'completed' && order.status !== 'cancelled' ? 
                                        `<button class="action-btn track-btn" onclick="trackOrder('${order._id}')">
                                            Track Order
                                        </button>` : 
                                        ''
                                    }
                                    ${(order.status === 'pending' || order.status === 'confirmed') && order.paymentStatus !== 'paid' ? 
                                        `<button class="action-btn" style="background: rgba(239, 68, 68, 0.1); color: var(--danger);" onclick="cancelOrder('${order._id}')">
                                            Cancel Order
                                        </button>` : 
                                        ''
                                    }
                                </div>
                            </div>
                        `).join('');
                    } else {
                        ordersList.innerHTML = '<p>No orders yet. Start by browsing our menu!</p>';
                    }
                } else {
                    throw new Error(data.message || 'Failed to load orders');
                }
            } catch (error) {
                console.error('❌ Error loading orders:', error);
                ordersList.innerHTML = `
                    <div class="error-message">
                        <p>Error loading orders: ${error.message}</p>
                        <button onclick="loadOrders()" style="background: var(--primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                            Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Track order function
        async function trackOrder(orderId) {
            try {
                const response = await fetch(`/api/customer/orders/${orderId}/tracking`);
                const data = await response.json();
                
                if (data.success) {
                    const trackingInfo = data.data;
                    showNotification(`Order #${trackingInfo.orderNumber}: ${trackingInfo.statusMessage}`, 'info');
                }
            } catch (error) {
                console.error('❌ Error tracking order:', error);
                showNotification('Error tracking order', 'error');
            }
        }

        // Cancel order function
        async function cancelOrder(orderId) {
            if (!confirm('Are you sure you want to cancel this order?')) {
                return;
            }

            try {
                const response = await fetch(`/api/customer/orders/${orderId}/cancel`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Order cancelled successfully', 'success');
                    loadOrders();
                    loadDashboardStats();
                } else {
                    showNotification('Error cancelling order: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error cancelling order:', error);
                showNotification('Error cancelling order', 'error');
            }
        }

        // Load user profile
        function loadUserProfile() {
            // Get user data from template (passed from server)
            const userData = <%- JSON.stringify(user) %>;
            
            if (userData) {
                // Update profile section
                document.getElementById('profileName').textContent = userData.name || 'Not provided';
                document.getElementById('profileEmail').textContent = userData.email || 'Not provided';
                document.getElementById('profilePhone').textContent = userData.phone || 'Not provided';
                
                // Format address - show only street and city
                if (userData.address && userData.address.street && userData.address.city) {
                    const address = `${userData.address.street}, ${userData.address.city}`;
                    document.getElementById('profileAddress').textContent = address;
                } else {
                    document.getElementById('profileAddress').textContent = 'Not provided';
                }
                
                // Update welcome message and avatar
                document.getElementById('welcomeUser').textContent = `Welcome, ${userData.name || 'Customer'}!`;
                const userAvatar = document.querySelector('.user-avatar');
                if (userAvatar) {
                    userAvatar.textContent = (userData.name || 'Customer').charAt(0).toUpperCase();
                }
                
                console.log('✅ User profile loaded:', userData);
            } else {
                console.warn('⚠️ No user data available');
            }
        }

        // Enable edit mode
        function enableEditMode() {
            // Get current user data
            const userData = <%- JSON.stringify(user) %>;
            
            if (userData) {
                // Populate form with current data
                document.getElementById('editName').value = userData.name || '';
                document.getElementById('editEmail').value = userData.email || '';
                document.getElementById('editPhone').value = userData.phone || '';
                
                if (userData.address) {
                    document.getElementById('editStreet').value = userData.address.street || '';
                    document.getElementById('editCity').value = userData.address.city || '';
                } else {
                    document.getElementById('editStreet').value = '';
                    document.getElementById('editCity').value = '';
                }
                
                // Switch to edit mode
                document.getElementById('profileViewMode').style.display = 'none';
                document.getElementById('profileEditMode').style.display = 'block';
            }
        }

        // Disable edit mode (cancel)
        function disableEditMode() {
            document.getElementById('profileViewMode').style.display = 'block';
            document.getElementById('profileEditMode').style.display = 'none';
            document.getElementById('profileUpdateForm').reset();
        }

        // Handle profile update form submission
        document.getElementById('profileUpdateForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('editName').value,
                phone: document.getElementById('editPhone').value,
                address: {
                    street: document.getElementById('editStreet').value,
                    city: document.getElementById('editCity').value
                }
            };
            
            try {
                console.log('🔄 Updating profile:', formData);
                
                const response = await fetch('/api/customer/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Profile updated successfully!', 'success');
                    disableEditMode();
                    // Reload the page to get updated user data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error updating profile:', error);
                showNotification('Error updating profile: ' + error.message, 'error');
            }
        });

        // Notification system
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotification = document.querySelector('.notification');
            if (existingNotification) {
                existingNotification.remove();
            }

            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <span>${message}</span>
                <button onclick="this.parentElement.remove()">&times;</button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Initializing dashboard...');
            updateCartCount();
            loadUserProfile();
            loadDashboardStats();
            loadMenu();
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            const cartModal = document.getElementById('cartModal');
            const qrModal = document.getElementById('qrModal');
            
            if (event.target === cartModal) {
                cartModal.style.display = 'none';
            }
            if (event.target === qrModal) {
                qrModal.style.display = 'none';
            }
        }
    </script>
</body>
</html>